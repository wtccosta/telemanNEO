package br.gov.ms.corumba.services;

import javax.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.gov.ms.corumba.entities.Produto;
import br.gov.ms.corumba.repositories.ProdutosRepository;
import br.gov.ms.corumba.resources.dto.produtos.ListaProdutoDTO;
import br.gov.ms.corumba.resources.dto.produtos.ProdutoDTO;
import br.gov.ms.corumba.resources.dto.produtos.ProdutoInputDTO;
import br.gov.ms.corumba.services.exceptions.ResourceNotFoundException;

@Service
public class ProdutoService {

	@Autowired
	private ProdutosRepository repository;
	
	@Autowired
	private LocalService localService;
	
	@Autowired
	private PlanoService planoService;
	
	@Autowired
	private ServicoService ServicoService;
	
	@Autowired
	private PrecoService precoService;
	
	@Autowired
	private RoteadorService roteadorService;
	
	@Autowired 
	private VelocidadeInternetService velocidadeInternetService;
	
	@Transactional(readOnly = true)
	public Page<ListaProdutoDTO> findAllPaged(Pageable pageable) {
		Page<Produto> produtos = repository.findAll(pageable);
		return produtos
				.map(x -> new ListaProdutoDTO(x));
	}
	
	@Transactional(readOnly = true)
	public ProdutoDTO findOne(Long id) {
		Produto produto = repository.findById(id).orElseThrow(()-> new ResourceNotFoundException("Produto não encontrado, id: "+id));
		return new ProdutoDTO(produto);
	}
	
	@Transactional(readOnly = false)
	public ProdutoDTO persist(ProdutoInputDTO dto) {
		try {
			Produto entity = new Produto();
			copyDtoToEntity(dto, entity);
			entity = repository.save(entity);
			return new ProdutoDTO(entity);
		} 
		catch (EntityNotFoundException e) {
			throw new ResourceNotFoundException("Id not found: "+ e.getMessage());
		}
		
	}
	
	@Transactional(readOnly = true)
	public Produto findOneEntity(Long id) {
		return repository.findById(id).orElseThrow(()-> new ResourceNotFoundException("Produto não encontrado, id: "+id));
		
	}
	
	private void copyDtoToEntity(ProdutoInputDTO dto, Produto entity) {
		entity.setLinhaOuRamal(dto.getLinhaOuRamal());
		entity.setContrato(dto.getContrato());
		entity.setAgrupador(findOneEntity(dto.getAgrupadorId()));
		entity.setLocal(localService.findOneEntity(dto.getLocalId()));
		entity.setServico(ServicoService.findOneEntity(dto.getServicoId()));
		entity.setPlano(planoService.findOnentity(dto.getPlanoId()));
		entity.setPrecoServico(precoService.findOneEntity(dto.getPrecoServicoId()));
		entity.setPrecoPlano(precoService.findOneEntity(dto.getPrecoPlanoId()));
		entity.setRoteador(roteadorService.findOneEntity(dto.getRoteadorId()));
		entity.setVelocidade(velocidadeInternetService.findOneEntity(dto.getVelocidadeInternetId()));
		entity.setDiaVencimento(dto.getDiaVencimento());
		entity.setDataInstalacao(dto.getDataCadastro());
		
		//entity.getNumerosAgrupados().clear();
		for(ListaProdutoDTO agrupadorDto : dto.getNumerosAgrupados()) {
			Produto prod = findOneEntity(agrupadorDto.getId());
			System.out.println(prod.toString());
			entity.getNumerosAgrupados().add(prod);
		}
			
	}
}
