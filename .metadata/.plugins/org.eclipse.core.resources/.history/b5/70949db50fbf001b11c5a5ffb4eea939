package br.gov.ms.corumba.services;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.gov.ms.corumba.entities.Local;
import br.gov.ms.corumba.repositories.LocalRepository;
import br.gov.ms.corumba.resources.dto.local.LocalDTO;
import br.gov.ms.corumba.resources.dto.produtos.ProdutoDTO;
import br.gov.ms.corumba.services.exceptions.ResourceNotFoundException;

@Service
public class LocalService {

	@Autowired
	private LocalRepository repository;
	
	@Transactional(readOnly = true)
	public  Page<LocalDTO> findAllPaged(Pageable paged) {
		Page<Local> produtos = repository.findAll(paged);
	   return produtos.map(x -> new LocalDTO(x));
	}
	
	@Transactional(readOnly = true)
	public  List<LocalDTO> findAll() {
		List<Local> produtos = repository.findAll();
	   return produtos.stream()
			   .map(x -> new LocalDTO(x)).collect(Collectors.toList());
	}
	
	@Transactional(readOnly = true)
	public LocalDTO findOne(Long id) {
		Local local = repository.findById(id).orElseThrow(()-> new ResourceNotFoundException("Produto não encontrado, id: "+id));
		return new LocalDTO(local);
	}
	
	@Transactional(readOnly = true)
	public Local findOneEntity(Long id) {
		return repository.findById(id).orElseThrow(()-> new ResourceNotFoundException("Produto não encontrado, id: "+id));
		
	}

	@Transactional(readOnly = false)
	public LocalDTO persist(LocalDTO dto) {
		Local local = new Local();
		copyToEntity(dto, local);
		return local;
	}
	
	private void copyToEntity(LocalDTO dto, Local entity) {
		entity.setNome(dto.getNome());
		entity.setDescricao(dto.getDescricao());
		entity.setSecretaria(dto.getSecretaria());
		entity.setEndereco(dto.getEndereco());
	}
}
